use common.commonKnowledge as knowledge.
use common.events as module.
use common.com_basic as module.
use common.com_block_info as module.
use common.com_visited as module.
use common.lookahead as module.

order=linearall.
module blockComTeamEvents {
	
	if true then comBasic.
	
	if true then comBlocks.
	if true then comVisited.
	
	if true then lookAhead.
	
	if true then events.
	
	if goal( in(Place) ), bel( holding(_), not(Place = 'DropZone') ) then delete( holding('Nothing!') ).
	
	% Only track deliver messages for Blocks we are still trying to deliver.
	forall bel( msg(Agt, doDeliver(BlockID)) ), goal( delivered(BlockID) ) do insert ( doDeliver(Agt, BlockID) ).
	forall bel( msg(Agt, doNotDeliver(BlockID)) ), goal( delivered(BlockID) ) do insert ( doNotDeliver(Agt, BlockID) ).
	
	% Reset response tracking if we get told an agent is not delivering a block.
	forall bel( msg(Agt, notDelivering(_)) ) do delete ( sentDeliveryResponse(Agt) ).
	
	% If another agents want to deliver the same colour in the sequence. Resolve the conflict.
	forall goal( sequence(Seq) ), bel( delivering(me, BlockID), delivering(Agt, OtherBlockID), 
		% First make sure we are not comparing to ourself or an agent we already responded to.
		not(Agt = me), not(sentDeliveryResponse(Agt)),
		% If there are blocks being delivered of the same colour...
		block(BlockID, Colour, _), block(OtherBlockID, Colour, _), agentCount(N),
		% get list of colours that are being delivered excluding my own...
		findall(ColourID, (delivering(Agt,ABlock), not(Agt = me), block(ABlock, ColourID, _)), TakenC),
		% Check what colours should be delivered right now and if we do not have to much of Colour... 
		nextXColoursInSeq(Colours, N, Seq), single_subtract(Colours, TakenC, UntakenC), not(member(Colour, UntakenC)),
		% Check if we have priority in delivering the Colour...
		me(Me), Me @> Agt)
		% If we have priority tell the other agent not to deliver the block 
		do (Agt).send( msg(doNotDeliver(OtherBlockID)) ) + insert( sentDeliveryResponse(Agt) ).
	
	% If we have no objection to the other agent delivering a block.
	forall bel( delivering(Agt, BlockID), not(Agt = me), not(sentDeliveryResponse(Agt)) 
		% Then the other agent can just deliver the block and ensure we only send it once.
		) do (Agt).send( msg(doDeliver(BlockID)) ) + insert( sentDeliveryResponse(Agt) ).
	
	% If I aim to deliver a block check if someone told us not to deliver the block...
	if goal( delivered(BlockID) ), bel( doNotDeliver(_, BlockID) )
		% Then stop wanting to deliver the block. No need to wait for all responses.
		then drop( delivered(BlockID) ) + delete( delivering(me, BlockID) ).
		
	% If I aim to deliver a block check and we don't already have permission....'
	if goal( delivered(BlockID) ), bel( not(deliverPermission(BlockID)),
		% Get the list of responses from other agents, no need to check doNotDeliver we already dropped in that case...
		findall(Agt, doDeliver(Agt, BlockID), Agts),
		% then if I have gotten a response from all other agents we have deliverPermission.
		length(Agts, N), agentCount(X), N is X-1 ) then insert( deliverPermission(BlockID) ).
		
	% Do cleanup of agent deliver messages.
	forall bel( deliverPermission(BlockID), doDeliver(Agt, BlockID) ) do delete( doDeliver(Agt, BlockID) ).
	forall not(goal( delivered(BlockID) )), bel( doNotDeliver(Agt, BlockID) ) do delete( doNotDeliver(Agt, BlockID) ).
}