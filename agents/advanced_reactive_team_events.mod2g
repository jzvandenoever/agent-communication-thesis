use common.commonKnowledge as knowledge.
use common.events as module.
use common.com_basic as module.
use common.com_block_info as module.
use common.com_visited as module.
use common.lookahead as module.

module blockComTeamEvents {
	
	if true then comBasic.
	
	if true then comBlocks.
	if true then comVisited.
	
	if true then lookAhead.
	
	if true then events.
	
	forall (Agt).sent( msg(doDeliver(BlockID)) ) do insert ( doDeliver(Agt, BlockID) ).
	forall (Agt).sent( msg(doNotDeliver(BlockID)) ) do insert ( doNotDeliver(Agt, BlockID) ).
	
	% If somehow two agents want to deliver the same colour in the sequence. Resolve the conflict.
	forall a-goal( sequence(Seq) ), bel( delivering(me, BlockID), delivering(Agt, OtherBlockID), 
		% If there are blocks being delivered of the same colour... 
		not(Agt = me), block(BlockID, Colour, _), block(OtherBlockID, Colour, _), agentCount(N),
		% get list of colours that are being delivered excluding my own...
		findall(ColourID, (delivering(Agt,ABlock), not(Agt = me), block(ABlock, ColourID, _)), TakenC),
		% Check if more of that colour should be delivered and aren't all being delivered already... 
		nextXColoursInSeq(Colours, N, Seq), single_subtract(Colours, TakenC, UntakenC) ) do {
			% If there are to many blocks of that colour being delivered, tell the other agent to...
			if bel( not(member(Colour, UntakenC)) ) then {
				% drop it if my name is larger than the other agent's. 
				if bel( me(Me), Me > Agt ) then (Agt).send( msg(doNotDeliver(OtherBlockID)) ).
				% deliver it if my name is smaller than the other agent's.
				% I will still be told to not deliver this block later. This is to prevent deadlocks.
				if bel( me(Me), Me < Agt ) then (Agt).send( msg(doDeliver(OtherBlockID)) ).
			}
			% If there still needs to be one of that colour delivered, tell the other agent to...
			if bel( member(Colour, UntakenC) ) then (Agt).send( msg(doDeliver(OtherBlockID)) ).
		}
	% If two agents want to deliver blocks 
	forall bel( delivering(me, BlockID), delivering(Agt, OtherBlockID), not(Agt = me),
		% If there are blocks being delivered different colours let the other agent. 
		block(BlockID, Colour, _), block(OtherBlockID, OtherColour, _), not(Colour = OtherColour) ) do
			(Agt).send( msg(doDeliver(OtherBlockID)) ).
	% If another agents wants to deliver a block and I don't let them.
	forall bel( not(delivering(me, _)), delivering(Agt, OtherBlockID) ) do
			(Agt).send( msg(doDeliver(OtherBlockID)) ).
	
	% If I aim to deliver a block..... 
	if goal( delivered(BlockID) ), bel(
		% Get the list of responses from other agents...
		findall(Agt, (doDeliver(Agt, BlockID); doNotDeliver(Agt, BlockID)), Agts),
		% then if I have gotten a response from all other agents...
		length(Agts, N), agentCount(X), N is X-1 ) then {
			% Stop trying to deliver the block if someone disagreed.
			if bel( doNotDeliver(_, BlockID) ) then drop( delivering(me, BlockID) ) + 
				delete( delivering(me, BlockID) ).
			% If nobody told me not to deliver I can deliver the block.
			if bel( not(doNotDeliver(Agt, BlockID)) ) then insert( deliverPermission(BlockID) ).
			% Then clean up the responses.
			forall bel( doDeliver(Agt, BlockID) ) do delete( doDeliver(Agt, BlockID) ).
			forall bel( doNotDeliver(Agt, BlockID) ) do delete( doNotDeliver(Agt, BlockID) ).
	}
}