use common.commonKnowledge as knowledge.
use common.events as module.
use common.com_basic as module.
use common.com_block_info as module.
use common.com_visited as module.
use common.lookahead as module.

order=linearall.
module proactiveTeamEvents {
	
	if true then comBasic.
	
	if true then comBlocks.
	if true then comVisited.
	
	if true then lookAhead.
	
	if true then events.
	
	% If somehow two agents want to deliver the same colour in the sequence. Resolve the conflict.
	forall a-goal( sequence(Seq) ), bel( delivering(me, BlockID), delivering(Agt, OtherBlockID),
		% If there are blocks being delivered of the same colour... 
		not(Agt = me), block(BlockID, Colour, _), block(OtherBlockID, Colour, _), agentCount(N),
		% get list of colours that are being delivered excluding my own...
		findall(ColourID, (delivering(Agt,ABlock), not(Agt = me), block(ABlock, ColourID, _)), TakenC),
		% Check if more than one of that colour should be delivered... 
		nextXColoursInSeq(Colours, N, Seq), single_subtract(Colours, TakenC, UntakenC),
		% If only one needs to be delived, drop the goal if my name is of lower order than the other agent's' 
		not(member(Colour, UntakenC)), me(Me), Me @< Agt ), 
		a-goal( delivered(BlockID) ) do drop (delivered(BlockID)) + 
		delete( delivering(me, BlockID) ) + allother.send(msg(notDelivering(BlockID)) ).
}