use "../../simple_team" as mas.
use "../../simple_team" as module.
use "../commonKnowledge" as knowledge.
use "../events" as module.
use "../drop_deliver" as module.
timeout = 120.

test events with 
	pre{  }
	in{
		% Record post init module players entering the environment.
		percept( player(X) ) leadsto bel( player(X) ).
		
		percept( state(State) ) leadsto bel( state(State) ).
		percept( state(State) ), bel( state(state(OldState)), not(State = OldState) ) leadsto 
			not(bel( state(OldState) )).
			
		% Record where we are.
		percept( at(Place) ) leadsto bel( at(OldPlace) ).
		percept( at(Place) ), bel( at(OldPlace), not(Place = OldPlace) ) leadsto not(bel( at(OldPlace) )).
		
		% Record when we are entering or leaving a room.
		percept( in(Place) ) leadsto bel( in(Place) ).
		percept( in(Place) ), bel( not(visited(Place)), room(Place) ) leadsto bel( visited(Place) ).
		percept( not(in(Place) )), bel( in(Place) ) leadsto not(bel( in(Place) )).
		
		% Discover new blocks
		percept( color(BlockID, ColorID) ), bel( in(Place) ) leadsto bel( block(BlockID, ColorID, Place) ).
		percept( color(BlockID, ColorID) ), bel( in(Place), block(BlockID, ColorID, OtherPlace),
			not(Place = OtherPlace) ) leadsto not(bel( block(BlockID, ColorID, OtherPlace) )).
		
		% Record atblock location of agent
		percept( atBlock(BlockID) ) leadsto bel( atBlock(BlockID) ).
		not(percept( atBlock(BlockID) )), bel( atBlock(BlockID) ) leadsto not(bel( atBlock(BlockID) )).
		
		% Record if a block is being held
		percept( holding(BlockID) ) leadsto bel( holding(BlockID) ).
		percept(not(holding(BlockID))) leadsto not(bel( holding(BlockID) )).
		% update held location regardless on if we know of the block already.
		percept(holding(BlockID)), bel(block(BlockID, ColorID, Place)) leadsto 
			bel( block(BlockID, ColorID, held) ).
		percept(holding(BlockID)), bel(block(BlockID, ColorID, Place)) leadsto 
			not(bel( block(BlockID, ColorID, Place) )). 
		
		%remove blocks that are not held or in the room anymore
		%bel( in(Place), block(BlockID, ColorID, Place), not(holding(BlockID)) ), not(percept( color(BlockID, ColorID) )) leadsto not(bel( block(BlockID, ColorID, Place) )).
		
		% Update sequence when in dropzone using on change only sequenceIndex
		percept( sequenceIndex(X) ) leadsto bel( sequenceIndex(X) ).
		percept( sequenceIndex(X) ), bel( sequenceIndex(OldX), not(X = OldX) ) leadsto
			not(bel( sequenceIndex(OldX) )). 
		% By using length with an ununified list we define the length of the list with unified variables.
		% The following append then unifies the list to the first X atoms of the Full sequence.
		a-goal(sequence(Full)), bel( in('DropZone'), sequence(Seq), length(Seq, N), sequenceIndex(X), 
			N < X , length(NewSeq, X), append(NewSeq, _, Full) ) leadsto 
			bel( sequence(NewSeq) ), not(bel( sequence(Seq) )).
			
		% remove obsolete goals and make our state so that we can immediately perform gotos to the new goal.
		% The block is gone.
		a-goal( delivered(BlockID) ), a-goal(sequence(Seq)), not(bel( block(BlockID, ColorID, Place) )) 
			leadsto done( drop_deliver(BlockID) ).
		% The block is not needed for the next X blocks.
		a-goal( delivered(BlockID) ), a-goal(sequence(Seq)), bel( block(BlockID, ColorID, Place), 
			agentCount(X), nextXColoursInSeq(Colors, X, Seq), not(member(ColorID, Colors)) ) 
			leadsto done( drop_deliver(BlockID) ).
		% Everything is delivered so we don't have to pick up this block any more.
		a-goal( delivered(BlockID) ), not(goal( sequence(Seq) )) leadsto done( drop_deliver(BlockID) ).
		% Another agent has picked up the same block so we can't deliver it.
		a-goal( delivered(BlockID) ), bel( block(BlockID, _, held), not(holding(BlockID)) ) 
			leadsto done( drop_deliver(BlockID) ).
		
		% adopt new goals (and stop traveling) 
		% Find way to test that this happened at least once
		% goal(sequence(Seq)), not(goal(in(Place); at(Place))) leadsto done( adoptgoals ).
	}
	post{ }
	
robot {
	% Test the percepts by running through a whole scenario
	do main.
}
