use "../../simple_team" as mas.
use "../commonKnowledge" as knowledge.
use "../../simple_team" as module.
use "../adoptExplorationGoals" as module.
timeout = 60.

test adoptExplorationGoals with 
	pre{ not(goal(in(_))), not(goal(at(_))), a-goal(sequence(Seq)) }
	in{
		% test finding blocks to deliver.
		a-goal(sequence(Seq)), bel( agentCount(N), nextXColoursInSeq(Colors, N, Seq), 
		findall(ColorID, (delivering(_,ABlock), block(ABlock, ColorID, _)), TakenC),
		single_subtract(Colors, TakenC, UntakenC), member(Color, UntakenC), 
		block(BlockID, Color, Place), not(Place = held) ) leadsto goal( delivered(BlockID) ).
		
		% Test visit unvisited rooms. We only want to evaluate this once. After the first instantiation we
		% get our goal. And the first not clause stops the rest from evaluating.
		not(goal(in(_))), bel( room(Place), not(dropZone(Place)), not(visited(Place))) leadsto 
			goal(in(Place) ).
			
		% Test agent doesn't just stick around in the dropzone.'
		not(goal(in(_))), bel( dropZone(Place), in(Place) ) leadsto goal( at('FrontDropZone') ). 
	}
	post{ }
	
robot {
	do main.
}
