use commonKnowledge as knowledge.
use adoptGoals as module.
use drop_deliver as module.
use updateSequence as module.
order=linearall.

module events {
	% Sometimes not all other agents are passed along at the init.
	forall percept( player(X) ), not(bel( player(X) )) do insert( player(X) ).
	
	% Update the agent's state of movement.
	forall percept(state(NewState)), bel( state(State))  
		do delete( state(State) ) + insert( state(NewState) ).
	
	% Record where we are.
	forall percept(at(Place)), bel(at(OldPlace)) do delete( at(OldPlace) ) + insert( at(Place) ).
	
	% Record when we are entering or leaving a room.
	forall percept(in(Place)) do insert( in(Place) ).
	forall percept(in(Place)), bel( not(visited(Place)), room(Place) ) do insert( visited(Place) ).
	forall percept(not(in(Place))) do delete( in(Place) ).

	% Discover new blocks
	forall percept(color(BlockID, ColorID)), bel( in(Place), not(block(BlockID, ColorID, Place)),
		block(BlockID, ColorID, OtherPlace), Place \= OtherPlace ) do 
		delete( block(BlockID, ColorID, OtherPlace) ) + insert( block(BlockID, ColorID, Place) ).
	forall percept(color(BlockID, ColorID)), bel( in(Place), not(block(BlockID, ColorID, Place)) ) 
		do insert( block(BlockID, ColorID, Place) ).
	
	% Record atblock location of agent
	forall percept(atBlock(BlockID)) do insert(atBlock(BlockID)).
	forall percept(not(atBlock(BlockID))) do delete(atBlock(BlockID)).
	
	% Record if a block is being held
	forall percept(holding(BlockID)) do insert(holding(BlockID)).
	% update held location regardless on if we know of the block already.
	forall percept(holding(BlockID)), bel(block(BlockID, ColorID, Place)) do 
		delete(block(BlockID, ColorID, Place)) + insert(block(BlockID, ColorID, held)).
	forall percept(not(holding(BlockID))) do delete(holding(BlockID)).
	
	%remove blocks that are not held or in the room anymore
	forall bel(in(Place), block(BlockID, ColorID, Place), not(holding(BlockID))), 
		not(percept(color(BlockID, ColorID))) do delete(block(BlockID, ColorID, Place)).
	
	% Update sequence when in dropzone using on change only sequenceIndex
	if percept(sequenceIndex(X)), bel(sequenceIndex(OldX)) 
		then delete(sequenceIndex(OldX)) + insert(sequenceIndex(X)).
	% By using length with an ununified list we define the length of the list with unified variables.
	% The following append then unifies the list to the first X atoms of the Full sequence.
	if a-goal(sequence(Full)), bel( in('DropZone'), sequence(Seq), length(Seq, N), sequenceIndex(X), 
		N < X , length(NewSeq, X), append(NewSeq, _, Full) )
		then delete( sequence(Seq) ) + insert( sequence(NewSeq) ).
				
	% remove obsolete goals and make our state so that we can immediately perform gotos to the new goal.
	% The block is gone.
	if a-goal( delivered(BlockID) ), a-goal(sequence(Seq)), bel( not(block(BlockID, ColorID, Place)) ) 
		then drop_deliver(BlockID).
	% The block is not needed for the next X blocks.
	if a-goal( delivered(BlockID) ), a-goal(sequence(Seq)), bel( block(BlockID, ColorID, Place), 
		agentCount(X), nextXColoursInSeq(Colors, X, Seq), not(member(ColorID, Colors)) ) 
		then drop_deliver(BlockID).
	% Everything is delivered so we don't have to pick up this block any more.
	if a-goal( delivered(BlockID) ), not(goal( sequence(Seq) )) then drop_deliver(BlockID).
	% Another agent has picked up the same block so we can't deliver it.
	if a-goal( delivered(BlockID) ), bel( block(BlockID, _, held), not(holding(BlockID)) ) 
		then drop_deliver(BlockID).
	
	% adopt new goals (and stop traveling)
	if not(goal(in(Place); at(Place))), a-goal(sequence(Seq)) then adoptgoals.
}
