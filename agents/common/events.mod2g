use commonKnowledge as knowledge.
use adoptGoals as module.
use updateSequence as module.

module events {
	%-------communication updates & conclusions about other agents-----------------------------------
	forall bel( send('allother', Y) ) do allother.send(msg(Y)) + delete(send('allother', Y)).
	% deduce information based on deliveries of other agents:
	forall (Agt).sent(msg('deliveryDone')) do updateSequence.
	
	% Update the agent's state of movement.
	forall bel( state(State)), percept(state(NewState))  
		do delete( state(State) ) + insert( state(NewState) ).
	
	% Record when we are entering or leaving a room.
	forall percept(in(Place)) do insert( in(Place) ).
	forall percept(in(Place)), bel( not(visited(Place)), room(Place) ) do insert( visited(Place) ).
	forall percept(not(in(Place))) do delete( in(Place) ).

	% Discover new blocks
	forall percept(color(BlockID, ColorID)), bel( in(Place), not(block(BlockID, ColorID, Place)) ) 
		do insert( block(BlockID, ColorID, Place) ).
	
	% Record atblock location of agent
	forall percept(atBlock(BlockID)) do insert(atBlock(BlockID)).
	forall percept(not(atBlock(BlockID))) do delete(atBlock(BlockID)).
	
	% Record if a block is being held
	forall percept(holding(BlockID)) do insert(holding(BlockID)).
	forall percept(not(holding(BlockID))) do delete(holding(BlockID)).
	
	%remove blocks that are not held or in the room anymore
	forall bel(in(Place), block(BlockID, ColorID, Place), not(holding(BlockID))), 
		not(percept(color(BlockID, ColorID))) do delete(block(BlockID, ColorID, Place)).
	
	% Update sequence when in dropzone.
	if percept(sequenceIndex(X)), bel(sequenceIndex(OldX)) 
		then delete(sequenceIndex(OldX)) + insert(sequenceIndex(X)).
	if bel( in('DropZone'), seqDone(Seq), length(Seq, N), sequenceIndex(X), N < X , 
		sequence(Full), length(NewSeq, X), append(NewSeq, _, Full) )
		then delete( seqDone(Seq) ) + insert( seqDone(NewSeq) ).
				
	%remove obsolete goals
	if goal(holding(BlockID)), bel(not(block(BlockID, ColorID, Place))) then drop(holding(BlockID)).
	if goal(in(Place), holding(BlockID)), bel(not(block(BlockID, ColorID, Place))) then drop(holding(BlockID)).
	
	%adopt new goals (and stop traveling)		
	if not(goal(in(Place))), goal(seqDone(_)) then adoptgoals.
}
