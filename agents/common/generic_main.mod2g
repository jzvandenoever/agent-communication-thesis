use commonKnowledge as knowledge.
use actions as actionspec.
use updateSequence as module.
exit=nogoals.

module generic_main {
	% Optimisation for ending simulations if not agents are aware they are finished.
	if goal( sequence(Seq) ), bel( sequenceIndex(N), length(Seq, N) ) then exit-module.
	
	% Drop blocks in the dropzone when they are needed, and communicate this
	% Check if the block is the next block to be delivered because sometimes two blocks of the same colour are waiting
	% And the agents do not always change destinations before they enter the DropZone.
	if a-goal(delivered(BlockID)), goal( sequence(Seq) ), bel( in('DropZone'), holding(BlockID),
		nextColorInSeq(ColorID, Seq), block(BlockID, ColorID, _) ) then putDown + 
		allother.send( msg(delivered(BlockID)) ) + updateSequence(BlockID).
		
	%drop blocks in rooms when they are not needed anymore
	if bel(in(Loc),Loc\='DropZone', holding(BlockID)), not(a-goal(delivered(BlockID))) then putDown.
	
	%go to goal blocks
	if a-goal(delivered(BlockID)), bel(in(Place), block(BlockID,_,Place)) then goToBlock(BlockID).
	
	%pickup goal blocks (Yes the not holding is needed. Otherwise the action just keeps failing.)
	if a-goal(delivered(BlockID)), bel(not(holding(BlockID))) then pickUp(BlockID).
	
	%go to goal places
	if goal(at(Place); in(Place)), bel( state(stopped) ) then goTo(Place) + insert( state(traveling) ).
	if goal(at(Place); in(Place)) then goTo(Place).
}
