use robot as knowledge.
use robotGoals as module.
use updateSequence as module.

module robotEvents {
	%-------communication updates & conclusions about other agents-----------------------------------
	forall bel( send('allother', Y) ) do allother.send(msg(Y)) + delete(send('allother', Y)).
	% deduce information based on deliveries of other agents:
	forall (Agt).sent(msg('deliveryDone')) do updateSequence.
	forall (Agt).sent( msg(block(BlockID, ColorID, Place)) ) do insert( block(BlockID, ColorID, Place) ).
	forall (Agt).sent( msg(notblock(BlockID)) ), bel( block(BlockID, ColorID, Place) ) 
		do delete( block(BlockID, ColorID, Place) ) + insert( heldBlock(BlockID, ColorID, held) ).
	% These blocks have been dropped again.
	forall bel(block(BlockID, ColorID, held), block(BlockID, ColorID, Place)) 
		do delete( block(BlockID, ColorID, held) ).
		
	% React to other agent goals.
	forall (Agt).sent( msg(goal(Goal)) ) do insert( teamGoal(Agt, Goal) ).
	forall (Agt).sent( msg(dropgoal(Goal)) ) do delete( teamGoal(Agt, Goal) ).
	
	%forall a-goal(holding(BlockID)), bel( teamGoal(Agt, holding(BlockID)), me(Me), nonvar(Agt), Agt > Me) 
	%	do drop( holding(BlockID) ) + insert( send('allother', dropgoal(holding(BlockID))) ).
	%forall a-goal(in(Place)), bel( teamGoal(Agt, in(Place)), me(Me), nonvar(Agt), Agt > Me) 
	%	do drop( in(Place) ) + insert( send('allother', dropgoal(in(Place))) ).
		
	if bel( teamGoal(Agt, holding(BlockID)), block(BlockID, ColorID, _), nextNeededColor(ColorID), 
		aheadIndex(N), sequenceIndex(M), N =< M, NewIndex is M + 1) then delete(aheadIndex(N)) + 
		insert(aheadIndex(NewIndex)).
	if bel( teamGoal(Agt, holding(BlockID)), block(BlockID, ColorID, _), aheadIndex(N), sequenceIndex(M), 
		N > M, nextNeededColor(ColorID, N), NewIndex is N + 1) then delete(aheadIndex(N)) + 
		insert(aheadIndex(NewIndex)).
		
	% Update the agent's state of movement.
	forall bel( state(State)), percept(state(NewState))  
		do delete( state(State) ) + insert( state(NewState) ).
	
	% Record when we are entering or leaving a room.
	forall percept(in(Place)) do insert( in(Place) ).
	forall percept(in(Place)), bel( not(visited(Place)), room(Place) ) do insert( visited(Place) ).
	forall percept(not(in(Place))) do delete( in(Place)).
	
	forall percept(at(Place)), bel(at(OldPlace)) do delete( at(OldPlace) ) + insert( at(Place) ).
	
	% Discover new blocks
	forall percept(color(BlockID, ColorID)), bel( in(Place), not(block(BlockID, ColorID, Place)) ) 
			do insert( block(BlockID, ColorID, Place), send('allother', block(BlockID, ColorID, Place)) ).
	
	% Record atblock location of agent
	forall percept(atBlock(BlockID)) do insert(atBlock(BlockID)).
	forall percept(not(atBlock(BlockID))) do delete(atBlock(BlockID)).
	
	% Record if a block is being held
	forall percept(holding(BlockID)) do insert(holding(BlockID), send('allother', notblock(BlockID)) ).
	forall percept(not(holding(BlockID))) do delete(holding(BlockID)).
	
	%remove blocks that are not held or in the room anymore
	forall bel(in(Place), block(BlockID, ColorID, Place), not(holding(BlockID))), not(percept(color(BlockID, ColorID))) 
		do delete(block(BlockID, ColorID, Place)).
				
	%remove blocks that are not held or in the room anymore
	forall bel(in(Place), block(BlockID, ColorID, Place), not(holding(BlockID))), 
		not(percept(color(BlockID, ColorID))) do delete(block(BlockID, ColorID, Place)).
		
	% Update sequence when in dropzone.
	if percept(sequenceIndex(X)), bel(hiddenSequenceIndex(OldX)) 
		then delete(hiddenSequenceIndex(OldX)) + insert(hiddenSequenceIndex(X)).
	if bel( in('DropZone'), hiddenSequenceIndex(N), sequenceIndex(M), N > M )
		then delete( sequenceIndex(M) ) + insert( sequenceIndex(N) ).
		
	%remove obsolete goals
	if goal(holding(BlockID)), bel(not(block(BlockID, ColorID, Place))) 
		then drop(holding(BlockID)) +  insert( send('allother', dropgoal(holding(BlockID))) ).
	%adopt new goals (and stop traveling)		
	if not(goal(in(Place))), a-goal(finished) then adoptgoals.
}
