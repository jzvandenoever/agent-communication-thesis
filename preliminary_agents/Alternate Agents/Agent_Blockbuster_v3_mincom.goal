% ------Agent_Blockbuster_v3_mincom by Chris Rozemuller ---------
% The aim of this agent is: Task completion with with minimal communication  
% All agents initially know the goal sequence. All agents try to make progress invidually 
% exploring and delivering the next needed block
% Only the predicate deliveryDone is communicated when the next needed block is delivered.
% Other agents update seqDone and as a result they will search for the new nextneeded block
% Assumptions: Task progression and room occupation are NOT perceived.
init module {
	knowledge {		
		% A room is a place with exactly one neighbour, i.e., there is only one way to get to and from that place.
		room(PlaceID) :- zone(_,PlaceID,_,_,Neighbours), length(Neighbours,1).
		holdingNextBlock :- holding(BlockID),block(BlockID, ColorID, Place), nextNeededColor(ColorID).
		nextNeededColor(ColorID) :- sequence(Seq), seqDone(SDone), append(SDone, [ColorID|_], Seq).
	}
	program {
		if bel(get_time(CurrentTime)) then insert(startTime(CurrentTime)).	
		% Store map information, i.e., navigation points in the agent's belief base.
		forall bel( percept(zone(ID, Name, X, Y, Neighbours)) ) do insert( zone(ID, Name, X, Y, Neighbours) ).
		% Record the initial state of movement in belief base.
		if bel( percept(state(State)) ) then insert( state(State) ).		
		% Record initial location
		if bel( percept(at(Place)) ) then insert( at(Place) ).		
		% Record goal sequence
		if bel( percept(sequence(Seq))) then insert(sequence(Seq)) + adopt(seqDone(Seq)).		
		% Adopt initial goal going to a random place
		if bel(room(PlaceID), PlaceID\='DropZone') then adopt(in(PlaceID)).
	}	
	actionspec {
		% The goTo action makes the agent move to a place (location) in the BW4T environment.
		% As long as the agent has not arrived at the place it is going to, it will be in "traveling" mode.
		goTo(Location) {
            pre { not(state(traveling)) }
			post { true }
		}
		% goToBlock only when not traveling and in a room
		goToBlock(BlockID) {
            pre {in(_), not(state(traveling)) }
			post { true }
		}
		% pickUp can only be performed when not holding a block
		pickUp{
			pre{not(state(traveling)), not(holding(_))}
			post{ true }
		}
		% putDown can only be performed when holding a block
		putDown{
			pre{not(state(traveling)), holding(_)}
			post{ true }
		}
	}
	
	beliefs{				
		seqDone([]).					%Colors
	}	
	
}

main module [exit=nogoals] {
	program {
		%drop blocks in the dropzone when they are needed, and communicate this
		if bel(in('DropZone'), holdingNextBlock) then insert( doSend('allother', deliveryDone) ) + putDown + updateSequence.
		%drop blocks in rooms when they are not needed anymore
		if bel(in(Loc),Loc\='DropZone', not(holdingNextBlock)) then putDown.
		%go to goal places
		if a-goal(in(Place)) then goTo(Place).
		%go to goal blocks
		if a-goal(holding(BlockID)), bel(in(Place), block(BlockID,_,Place), not(atBlock(BlockID))) then goToBlock(BlockID).
		%pickup goal blocks
		if a-goal(holding(BlockID)), bel(atBlock(BlockID)) then pickUp.		
			}
}
event module {
	#import "../com_failure.pl".
	program{
		forall bel(doSend(X, Y), messageFailed) do delete(doSend(X, Y)).
		forall bel( doSend('allother', Y) ) do allother.send(Y) + delete(doSend('allother', Y)).

%-------communication updates & conclusions about other agents-----------------------------------
		% deduce information based on deliveries of other agents:
		forall bel( received(Agent, deliveryDone)) do updateSequence.				
		forall bel(received(A,M)) do delete(received(A,M)).	
			
%-------percept updates-----------------------------------------		
	    % Update the agent's state of movement.
		forall bel( state(State), percept(state(NewState)) ) do delete( state(State) ) + insert( state(NewState) ).
		
		% Record when we are entering or leaving a room.
		forall bel( percept(in(Place)), not(in(Place))) do  insert(in(Place)).
		forall bel( percept(not(in(Place))) ) do delete( in(Place) ).				
		
		% Record atblock location of agent
		forall bel( percept(atBlock(BlockID)) ) do insert(atBlock(BlockID)).
		forall bel( percept(not(atBlock(BlockID))) ) do delete(atBlock(BlockID)).
		
		% Discover new blocks
		forall bel( percept(color(BlockID, ColorID)), in(Place), not(block(BlockID, ColorID, Place))) do insert(block(BlockID, ColorID, Place)).
		
		% Record if a block is being held
		forall bel( percept(holding(BlockID)) ) do insert(holding(BlockID)).
		forall bel( percept(not(holding(BlockID))) ) do delete(holding(BlockID)).

		%remove blocks that are not held or in the room anymore
		forall bel(in(Place), block(BlockID, ColorID, Place), not(percept(color(BlockID, ColorID))), not(holding(BlockID))) do delete(block(BlockID, ColorID, Place)).
		
%-------update own goals----------------------------------------------		
		%remove obsolete goals
		if goal(holding(BlockID)), bel(not(block(BlockID, ColorID, Place))) then drop(holding(BlockID)).
		%adopt new goals (and stop traveling)		
		if not(goal(in(Place))), goal(seqDone(_)) then adoptgoals.		
	}
}

module updateSequence{
	program[order=linearall]{
		%update sequence
		if bel(seqDone(SDone),nextNeededColor(ColorID), append(SDone,[ColorID],NewSDone) ) then 
			delete(seqDone(SDone)) + insert(seqDone(NewSDone)).
		%remove beliefs about the delivered block (if this agent was delivering it)
		if bel(in('DropZone'), holding(BlockID), block(BlockID, ColorID, Place)) then delete(block(BlockID, ColorID, Place)).
	}
}

module adoptgoals{		
	program[order=linear]{
		%If holding the next needed block go to the dropzone.
		if bel(holding(BlockID),nextNeededColor(ColorID), block(BlockID, ColorID, _)) then adopt(in('DropZone')).
		%Otherswise, If the next needed block is known then adopt a goal to go there and hold it. 
		if bel(nextNeededColor(ColorID), block(BlockID, ColorID, Place)) then adopt(in(Place),holding(BlockID)).
		%Otherwise go to a random room.
		if bel(room(Place), Place\='DropZone') then adopt(in(Place)).
	}
} 